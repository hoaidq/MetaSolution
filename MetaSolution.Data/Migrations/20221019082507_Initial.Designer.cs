// <auto-generated />
using System;
using MetaSolution.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetaSolution.Data.Migrations
{
    [DbContext(typeof(MetaDbContext))]
    [Migration("20221019082507_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MetaSolution.Data.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Actions", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ActionInModule", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.HasKey("ModuleId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("ActionInModules", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValueInProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "AttributeValueId");

                    b.HasIndex("AttributeValueId");

                    b.ToTable("AttributeValueInProducts", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValueLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("AttributeValueLanguages", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Catalogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.CatalogLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("MetaAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TitleSite")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CatalogLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogId = 1,
                            LanguageCode = "vi-VN",
                            MetaAlias = "dien-thoai",
                            MetaDescription = "Điện thoại di động",
                            MetaKeywords = "điện thoại, điện thoại di động",
                            Title = "Điện thoại",
                            TitleSite = "Điện thoại di động"
                        },
                        new
                        {
                            Id = 2,
                            CatalogId = 1,
                            LanguageCode = "en-US",
                            MetaAlias = "mobile-phone",
                            MetaDescription = "mobile phone",
                            MetaKeywords = "mobile phone",
                            Title = "Phone",
                            TitleSite = "Mobile phone"
                        },
                        new
                        {
                            Id = 3,
                            CatalogId = 2,
                            LanguageCode = "vi-VN",
                            MetaAlias = "phu-kien",
                            MetaDescription = "phụ kiện di động",
                            MetaKeywords = "phụ kiện, phụ kiện di động",
                            Title = "Phụ kiện",
                            TitleSite = "Phụ kiện di động"
                        },
                        new
                        {
                            Id = 4,
                            CatalogId = 2,
                            LanguageCode = "en-US",
                            MetaAlias = "mobile-accessory",
                            MetaDescription = "mobile accessory",
                            MetaKeywords = "mobile accessory",
                            Title = "Accessory",
                            TitleSite = "Mobile accessory"
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Configs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "HomeTitle",
                            Value = "This is homepage of Meta Solution"
                        },
                        new
                        {
                            Id = 2,
                            Key = "HomeKeyword",
                            Value = "This is keyword of Meta Solution"
                        },
                        new
                        {
                            Id = 3,
                            Key = "HomeDescription",
                            Value = "This is description of Meta Solution"
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Code");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "vi-VN",
                            IsDefault = false,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Code = "en-US",
                            IsDefault = false,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "groups",
                            Level = 1,
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "users",
                            Level = 1,
                            Order = 2
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ModuleLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            LanguageCode = "vi-VN",
                            ModuleId = 1,
                            Name = "Quản lý nhóm"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            LanguageCode = "en-US",
                            ModuleId = 1,
                            Name = "Group manager"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            LanguageCode = "vi-VN",
                            ModuleId = 2,
                            Name = "Quản lý thành viên"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            LanguageCode = "en-US",
                            ModuleId = 2,
                            Name = "Member manager"
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 8, 25, 7, 475, DateTimeKind.Utc).AddTicks(9425));

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "ModuleId", "ActionId");

                    b.HasIndex("ActionId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 8, 25, 7, 474, DateTimeKind.Utc).AddTicks(6957));

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PromotionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserCreated")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserModified")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 10, 19, 8, 25, 7, 485, DateTimeKind.Utc).AddTicks(7434),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 12000000m,
                            PromotionPrice = 10500000m,
                            Status = 0,
                            UserCreated = "admin (hoaidq@gmail.com)",
                            ViewCount = 0,
                            Warranty = 12
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ProductInCatalog", b =>
                {
                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CatalogId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCatalogs", (string)null);

                    b.HasData(
                        new
                        {
                            CatalogId = 1,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ProductLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TitleSite")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "",
                            Description = "",
                            LanguageCode = "vi-VN",
                            MetaDescription = "",
                            MetaKeywords = "Điện thoại iPhone XS Max 64GB",
                            ProductId = 1,
                            Title = "Điện thoại iPhone XS Max 64GB",
                            TitleSite = "Điện thoại iPhone XS Max 64GB"
                        },
                        new
                        {
                            Id = 2,
                            Content = "",
                            Description = "",
                            LanguageCode = "en-US",
                            MetaDescription = "",
                            MetaKeywords = "iPhone XS Max 64GB",
                            ProductId = 1,
                            Title = "iPhone XS Max 64GB",
                            TitleSite = "iPhone XS Max 64GB"
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ProductMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 10, 19, 8, 25, 7, 475, DateTimeKind.Utc).AddTicks(7173));

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedias", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("75f218bb-7f54-4276-83d2-61a97077f66b"),
                            ConcurrencyStamp = "d2ddc838-5b23-4e37-801b-9ffe8bd8647f",
                            Description = "Administrator Role",
                            Name = "Administrator",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ebfc0b1-b951-4a1d-8b76-8acbe45ecd0e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88dbbcce-bab7-45ad-b018-5ed9ec7cd5a0",
                            Dob = new DateTime(1981, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoaidq@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hoai",
                            LastName = "Dương",
                            LockoutEnabled = false,
                            NormalizedEmail = "hoaidq@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEDKfIvg6XyFmGIC1/IXQl48d9OKYbd1KQopp0CYUojv4XIHEmjGxGf3cF8GG5eoSiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserInRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6ebfc0b1-b951-4a1d-8b76-8acbe45ecd0e"),
                            RoleId = new Guid("75f218bb-7f54-4276-83d2-61a97077f66b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ActionInModule", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Action", "Action")
                        .WithMany("ActionInModules")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Module", "Module")
                        .WithMany("ActionInModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValue", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Attribute", "Attribute")
                        .WithMany("AttributeValue")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValueInProduct", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.AttributeValue", "AttributeValue")
                        .WithMany("AttributeValueInProducts")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Product", "Product")
                        .WithMany("AttributeValueInProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValueLanguage", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.AttributeValue", "AttributeValue")
                        .WithMany("AttributeValueLanguages")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Language", "Language")
                        .WithMany("AttributeValueLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.CatalogLanguage", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Catalog", "Catalog")
                        .WithMany("CatalogLanguages")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Language", "Language")
                        .WithMany("CatalogLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ModuleLanguage", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Language", "Language")
                        .WithMany("ModuleLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Module", "Module")
                        .WithMany("ModuleLanguages")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Permission", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Action", "Action")
                        .WithMany("Permissions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ProductInCatalog", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Catalog", "Catalog")
                        .WithMany("ProductInCatalogs")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductInCatalogs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ProductLanguage", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Language", "Language")
                        .WithMany("ProductLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductLanguages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.ProductMedia", b =>
                {
                    b.HasOne("MetaSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductMedias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Action", b =>
                {
                    b.Navigation("ActionInModules");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Attribute", b =>
                {
                    b.Navigation("AttributeValue");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.AttributeValue", b =>
                {
                    b.Navigation("AttributeValueInProducts");

                    b.Navigation("AttributeValueLanguages");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogLanguages");

                    b.Navigation("ProductInCatalogs");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Language", b =>
                {
                    b.Navigation("AttributeValueLanguages");

                    b.Navigation("CatalogLanguages");

                    b.Navigation("ModuleLanguages");

                    b.Navigation("ProductLanguages");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Module", b =>
                {
                    b.Navigation("ActionInModules");

                    b.Navigation("ModuleLanguages");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Product", b =>
                {
                    b.Navigation("AttributeValueInProducts");

                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductInCatalogs");

                    b.Navigation("ProductLanguages");

                    b.Navigation("ProductMedias");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("MetaSolution.Data.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
